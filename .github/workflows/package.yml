name: build package

on: [workflow_dispatch]

jobs:
  build_sdist:
    name: Build source dist
    runs-on: ubuntu-latest
    steps:
    - name: Checkout library
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Set up Python
      uses: actions/setup-python@v5
      
    - name: Install dependencies
      run: python -m pip install build twine

    - name: Build
      run: python -m build --sdist

    - name: Check metadata
      run: python -m twine check dist/*

    - uses: actions/upload-artifact@v4
      with:
        name: cibw-sdist
        path: dist/*.tar.gz


  build_wheels:
    name: Wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        #os: [ubuntu-latest, windows-latest, macos-13, macos-14]
        #for testing
        os: [windows-latest]
        #python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        #for testing
        #python-version: ["3.11"]
    env:
      CIBW_SKIP: "*-win32"
    steps:
    - name: Checkout library
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.8
      if: runner.os == 'macOS' && runner.arch == 'ARM64'

    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel==2.19.1

    - name: Build wheels
      run: python -m cibuildwheel --output-dir wheelhouse
      env:
        CIBW_ENVIRONMENT: MACOSX_DEPLOYMENT_TARGET=10.13
        #CIBW_ARCHS_MACOS: x86_64
        CIBW_ARCHS_WINDOWS: all
        CIBW_REPAIR_WHEEL_COMMAND_MACOS: DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}
        #CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "pip install delvewheel && delvewheel repair --ignore-existing -vv -w {dest_dir} {wheel}"
        #CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: pip install abi3audit && abi3audit --strict --report {wheel} && copy {wheel} {dest_dir}

    - run: ls
    
    - run: ls lib

    - run: ls uunet
    
    - uses: actions/upload-artifact@v4
      with:
        name: cibw-wheels-${{ matrix.os }}
        path: wheelhouse/*.whl
    
  pypi-publish-test:
    if: false
    name: upload release to PyPI
    needs:
    - build_sdist
    - build_wheels
    runs-on: ubuntu-latest
    environment: release-test
    permissions:
      id-token: write
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        pattern: cibw-*
        path: dist
        merge-multiple: true
    - name: Publish
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
